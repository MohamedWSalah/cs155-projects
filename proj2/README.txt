# Part 2: Defenses

## Attack Alpha
Attack Alpha relies on unsanatized user input being rendered to the page. We can avoid this attack (and other similar attacks), by simply sanatizing the user input by escaping all HTML related characters in any input provided by the user. While somewhat excessive, this is the easiest and most straight-forward way of knowing that the input is safe. Alternatively, we could keep a whitelist of allowed tags (such as <p>), but we'd rather err on the side of security.

## Attack Bravo
Attack Bravo relies on Cross-Site Request Forgery. The most straight forward way to solve this problem is to embed a secret token into the transfer page which depends on the logged in user in some way. This token should be difficult to guess. We can satisfy these requirements by simply using the HMAC function in the crypto.js library to generate a signature on the user + hashedpassword + salt data in the session (which should not change per session). The server is the only one able to generate this signature, and an attacker will be unable to guess it. This token allows us to verify the POST request is authorized by the user, since we include the token as part of the request. We do something similar for the set_profile API, and thereby prevent CSRF attacks there too.